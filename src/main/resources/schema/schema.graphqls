type Query {

    ## Profile

    # TODO: Delete after dry run
    resourceApplicant: String
    resourceAdmin: String
    resourceEmployer: String
    resourceVisitor: String

    login(auth: AuthInput): Session

    # company
    getCompanyProfile(id: ID!): CompanyProfile

    # jobs
    getJobs: [Job!]

    # applications
    viewApplication(id: ID!): JobApplication!
    viewMyapplications: [JobApplication!]

    # Skills
    suggestSkills(skill: String!): [Skill!]

    # Address
    getAddress: Address
    getContactInfo: ContactInfo

    # Applicant
    viewApplicantProfile(id: ID!): ApplicantProfile!
}

type Mutation {

    ## Auth
    registerUser(auth: AuthInput): Auth
    setUserRole(roleInput: RoleInput): Boolean

    ## Employer
    saveCompanyProfile(data: CompanyProfileInput): CompanyProfile
    saveJob(job: JobInput): Job

    # job - application
    applyForJob(data: JobApplicationInput): JobApplication

    # Address
    saveAddress(address: AddressInput): Address
    saveContactInfo(contactInfo: ContactInfoInput): ContactInfo

    # Skills
    saveSkills(skill: [String!]): [Skill!]
    saveSkill(data: SkillInput): Skill

    mapSkillToJob(data: JobSkillsInput!): [Skill!]
    mapSkillToUser(data: UserSkillsInput!): [Skill!]
}


### Models
type Auth {

    id: ID

    email: String!

    password: String!

}

type Session {

    token: String!

    memberId: String!

}



### Input

input AuthInput {

    email: String!

    password: String!

}

input RoleInput {

    memberId: Int!

    role: UserRoles!
}

enum UserRoles {

    ROLE_ADMIN,

    ROLE_APPLICANT,

    ROLE_EMPLOYER,

    ROLE_VISITOR
}